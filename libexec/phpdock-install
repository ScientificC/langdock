#!/bin/bash
# Summary: Install a php docker image from repositories
# Usage: phpdock install <version>
#        phpdock install -l/--list
#
#  -l/--list   List all available versions
#              By default show php-cli versions
#              Optionallity you can specify a php-apache version
#
# <version> should be a string matching a php version known to php
# repositories
# see 'phpdock repositories --list'
#
# More information at https://github.com/lucasdc6/phpdock#readme

set -e
[ -n "$PHPDOCK_DEBUG" ] && set -x

# Set config variables
COMMAND=`basename $0 | cut -d- -f2`

# Provide phpdock completions
if [ "$1" = "--complete" ]; then
  echo --list
  echo --apache
  echo --help
  exit 0
fi

function upsearch {
  slashes=${PWD//[^\/]/}
  directory="$PWD"
  for (( n=${#slashes}; n>0; --n ))
  do
    test -e "$directory/$1" && echo "$directory/$1" && return
    directory="$directory/.."
  done
}


# Config getopt
TEMP=`getopt -o l --long list,apache -n $PROG -- "$@"`
eval set -- "$TEMP"

# Avaiables repositories
if [ ! -f "$MAIN_PATH/etc/repositories" ]
then
  echo -e "$MAIN_PATH/etc/repositories missing, default value setted\nDefault value: php\n"
  echo "php" > "$MAIN_PATH/etc/repositories"
fi
PHP_IMAGES=( $(cat $MAIN_PATH/etc/repositories) )

# Function to install a php version
# Arguments
#   1: full name with tag
function install_php_version
{
  if [ "$1" ]
  then
    docker pull $1
  elif [ -f ".php-version" ]
  then
    echo -e "php version taken from file .php-version\n"
    cat .cli-version | xargs docker pull
  elif [ -f "$MAIN_PATH/etc/cli-version" ]
  then
    echo -e "php version taken from file $MAIN_PATH/etc/cli-version\n"
    cat $MAIN_PATH/etc/cli-version | xargs docker pull
  else
    echo "Please specify a php version"
  fi
}

# Function to get avaiables images from the repositories
# Arguments
#   1: image name
#   2: type (cli|apache)
function docker_tags {
  image="$1"
  tags=`wget -q https://registry.hub.docker.com/v1/repositories/${image}/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | awk -F: '{print $3}'`

  if [ -n "$2" ]
  then
    tags=` echo "${tags}" | grep "$2" `
  fi
  echo -e "${tags}\n"
}

# Function to list php versions from repositories
# Arguments
#   1: type (cli|apache)
#   2: silent mode
function list_php_versions {
  [ -z $2 ] && ( echo "List of availables versions" )
  for IMAGE in ${PHP_IMAGES[@]}
  do
    [ -z $2 ] && ( echo -e "\nIn $IMAGE repository" )
    array=(`docker_tags $IMAGE $1`)
    if [ -n "$2" ]; then
      array=( "${array[@]/#/$IMAGE:}" )
    fi
    printf '%s\n' "${array[@]}"
  done
}
# Function to generate versions list from repositories
# Arguments
#   1: array of elements
function createmenu {
  echo "Select a version to install"
  select option; do # in "$@" is the default
    if [ "$REPLY" -eq $# ];
    then
      echo "Exiting..."
      break;
    elif [ 1 -le "$REPLY" ] && [ "$REPLY" -le $(($#-1)) ];
    then
      echo "You selected $option which is option $REPLY"
      echo "Installing.."
      install_php_version $option
      break;
    else
      echo "Incorrect Input: Select a number 1-$#"
    fi
  done
}

# default value of apache
OPT="install"
MODE="cli"

# Parse arguments
while true ; do
  case "$1" in
    -l|--list)
      OPT="list"
      shift;;
    --apache)
      MODE="apache"
      shift;;
    --) shift ; break ;;
    *) echo "Internal error!" ; exit 1 ;;
  esac
done

PHP_VERSION=$1
PHP_VERSION_FILE=`upsearch ".$MODE-version"`

# Show help if non arguments passed to script
[ -z "$PHP_VERSION" -a -z "$PHP_VERSION_FILE" ] && ( phpdock-help $COMMAND; exit 1)


case "$OPT" in
  install)
    if [ -z $1 ]; then
      PHP_VERSION=`cat $PHP_VERSION_FILE`
      VERSIONS=(`list_php_versions $MODE true | grep $PHP_VERSION || true`)
      [ "${#VERSIONS[@]}" -eq 0 ] && ( echo "phpdock: version not found: $PHP_VERSION"; exit 1)
      VERSIONS=(${VERSIONS[@]} "exit")
      createmenu "${VERSIONS[@]}"
    else
      echo "Installing $PHP_VERSION"
      install_php_version $PHP_VERSION
    fi
    ;;
  list)
    list_php_versions $MODE
  ;;
esac
