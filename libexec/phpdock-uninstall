#!/bin/bash
# Summary: Uninstall a specific php version
# Usage: phpdock uninstall
#
#  -f  Attempt to remove the specified version without prompting
#      for confirmation. If the version does not exist, do not
#      display an error message.
#
# See `phpdock versions` for a complete list of installed versions.
#
# More information at https://github.com/lucasdc6/phpdock#readme

set -e
[ -n "$PHPDOCK_DEBUG" ] && set -x

# Set config variables
COMMAND=`basename $0 | cut -d- -f2`

# Provide phpdock completions
if [ "$1" = "--complete" ]; then
  if echo $@ | grep "\-\-apache"; then
    cat $MAIN_PATH/etc/apache_versions
  else
    cat $MAIN_PATH/etc/cli_versions
  fi
  echo --force
  echo --help
  exit 0
fi

[ "$#" -eq 0 ] && phpdock-help $COMMAND && exit

# Function to uninstall a php version
# Arguments
#   1: php version
function uninstall_php_version {
  docker image rm $1 -f
  echo -e "\n$1 removed\n"
  VERSIONS=( `phpdock-versions` )
  ACTUAL_VERSION=`phpdock-global || true`
  [ "$ACTUAL_VERSION" = "$1" ] && phpdock-global ${VERSIONS[0]}
  exit 0
}

# Function to generate versions list from repositories
# Arguments
#   1: array of elements
function createmenu {
  echo "Select a version to uninstall"
  select option; do # in "$@" is the default
    if [ "$REPLY" -eq $# ];
    then
      echo "Exiting..."
      break;
    elif [ 1 -le "$REPLY" ] && [ "$REPLY" -le $(($#-1)) ];
    then
      echo "You selected $option which is option $REPLY"
      [ "$OPTIONS" = "-f"  ] && ( echo "Removing docker image.."; uninstall_php_version $option; )
      echo "Are you shure?"
      select response in yes no; do
        if [ "$response" = "yes" ]; then
          echo "Removing docker image.."
          uninstall_php_version $option
        elif [ "$response" = "no" ]; then
          echo "Exiting..."
        fi
        break;
      done
      break;
    else
      echo "Incorrect Input: Select a number 1-$#"
    fi
  done
}

# Config getopt
TEMP=`getopt -o f --long force -n $PROG -- "$@"`
eval set -- "$TEMP"

# Parse arguments
while true ; do
  case "$1" in
    -f|--force)
      OPTIONS="-f"
      shift;;
    --) shift ; break ;;
    *) echo "Internal error!" ; exit 1 ;;
  esac
done

[ "$OPTIONS" = "-f" ] && uninstall_php_version $1 && exit 0

VERSION=(`phpdock versions | grep "$1" || true`)

[ ${#VERSION[@]} -eq 0 ] && ( echo "phpdock: version \`$1' not installed"; exit 1 )

VERSION=(${VERSION[@]} "exit")
createmenu ${VERSION[@]}
