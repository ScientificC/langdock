#!/usr/bin/env bash
#
# Summary: Set or show the shell-specific Ruby version
#
# Usage: phpdock shell <version> [-a|--apache]
#        phpdock shell --unset [-a|--apache]
#
# Sets a shell-specific Ruby version by setting the `PHP_CLI_DOCKER_IMAGE'
# environment variable in your shell. This version overrides local
# application-specific versions and the global version.
#
# <version> should be a string matching a Ruby version known to phpdock.
# The special version string `system' will use your default system Ruby.
# Run `phpdock versions' for a list of available Ruby versions.
#
# When `-` is passed instead of the version string, the previously set
# version will be restored. With `--unset`, the `PHP_CLI_DOCKER_IMAGE`
# environment variable gets unset, restoring the environment to the
# state before the first `phpdock shell` call.

set -e
[ -n "$PHPDOCK_DEBUG" ] && set -x

# Provide phpdock completions
if [ "$1" = "--complete" ]; then
  if echo $@ | grep "\-\-apache" > /dev/null; then
    cat $MAIN_PATH/etc/versions/apache
    echo --unset
  elif echo $@ | grep -v "\-\-help" > /dev/null; then
    echo system
    echo --apache
    echo --unset
    cat $MAIN_PATH/etc/versions/php
  fi
  if [ "$#" -eq 1 ]; then
    echo --help
  fi
  exit 0
fi

# Config getopt
TEMP=`getopt -o a,u --long apache,unset -n $PROG -- "$@"`
eval set -- "$TEMP"
MODE=php

# Parse arguments
while true ; do
  case "$1" in
    -a|--apache)
      MODE=apache
      shift;;
    --unset)
      ACTION=unset
      shift;;
    --) shift ; break ;;
    *) echo "Internal error!" ; exit 1 ;;
  esac
done

version="$1"
shell="$(basename "${PHPDOCK_SHELL:-$SHELL}")"

function get_version {
  if [ -z "$1" ]; then
    echo "phpdock: no shell-specific version configurated for $MODE" >&2
  else
    if [ "$MODE" = "cli" ]; then
      echo 'echo "$PHP_CLI_DOCKER_IMAGE"'
    else
      echo 'echo "$PHP_SERVER_DOCKER_IMAGE"'
    fi
  fi
}

if [ -z "$version" ]; then
  if [ "$MODE" = "cli" ]; then
    get_version PHP_CLI_DOCKER_IMAGE
  else
    get_version PHP_SERVER_DOCKER_IMAGE
  fi
fi

if [ "$ACTION" = "--unset" ]; then
  case "$shell" in
  fish )
    echo 'set -gu PHP_CLI_DOCKER_IMAGE_OLD "$PHP_CLI_DOCKER_IMAGE"'
    echo "set -e PHP_CLI_DOCKER_IMAGE"
    ;;
  * )
    echo 'PHP_CLI_DOCKER_IMAGE_OLD="$PHP_CLI_DOCKER_IMAGE"'
    echo "unset PHP_CLI_DOCKER_IMAGE"
    ;;
  esac
  exit
fi

if [ "$version" = "-" ]; then
  case "$shell" in
  fish )
    cat <<EOS
if set -q PHP_CLI_DOCKER_IMAGE_OLD
  if [ -n "\$PHP_CLI_DOCKER_IMAGE_OLD" ]
    set PHP_CLI_DOCKER_IMAGE_OLD_ "\$PHP_CLI_DOCKER_IMAGE"
    set -gx PHP_CLI_DOCKER_IMAGE "\$PHP_CLI_DOCKER_IMAGE_OLD"
    set -gu PHP_CLI_DOCKER_IMAGE_OLD "\$PHP_CLI_DOCKER_IMAGE_OLD_"
    set -e PHP_CLI_DOCKER_IMAGE_OLD_
  else
    set -gu PHP_CLI_DOCKER_IMAGE_OLD "\$PHP_CLI_DOCKER_IMAGE"
    set -e PHP_CLI_DOCKER_IMAGE
  end
else
  echo "phpdock: PHP_CLI_DOCKER_IMAGE_OLD is not set" >&2
  false
end
EOS
    ;;
  * )
    cat <<EOS
if [ -n "\${PHP_CLI_DOCKER_IMAGE_OLD+x}" ]; then
  if [ -n "\$PHP_CLI_DOCKER_IMAGE_OLD" ]; then
    PHP_CLI_DOCKER_IMAGE_OLD_="\$PHP_CLI_DOCKER_IMAGE"
    export PHP_CLI_DOCKER_IMAGE="\$PHP_CLI_DOCKER_IMAGE_OLD"
    PHP_CLI_DOCKER_IMAGE_OLD="\$PHP_CLI_DOCKER_IMAGE_OLD_"
    unset PHP_CLI_DOCKER_IMAGE_OLD_
  else
    PHP_CLI_DOCKER_IMAGE_OLD="\$PHP_CLI_DOCKER_IMAGE"
    unset PHP_CLI_DOCKER_IMAGE
  fi
else
  echo "phpdock: PHP_CLI_DOCKER_IMAGE_OLD is not set" >&2
  false
fi
EOS
    ;;
  esac
  exit
fi

containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# Make sure the specified version is installed.
VERSIONS=(`phpdock-versions`)
if containsElement $version ${VERSIONS[@]}  >/dev/null; then
  if [ "$version" != "$PHP_CLI_DOCKER_IMAGE" ]; then
    case "$shell" in
    fish )
      echo 'set -gu PHP_CLI_DOCKER_IMAGE_OLD "$PHP_CLI_DOCKER_IMAGE"'
      echo "set -gx PHP_CLI_DOCKER_IMAGE \"$version\""
      ;;
    * )
      echo 'PHP_CLI_DOCKER_IMAGE_OLD="$PHP_CLI_DOCKER_IMAGE"'
      echo "export PHP_CLI_DOCKER_IMAGE=\"$version\""
      ;;
    esac
  fi
else
  echo "false"
  exit 1
fi
